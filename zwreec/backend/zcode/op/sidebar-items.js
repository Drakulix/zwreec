initSidebarItems({"fn":[["arg_type","Returns the argument type of `operand`."],["encode_variable_arguments","Encode the variable arguments specified by `arg_types`."],["op_0","Byte encoding for op-codes with 0 operators."],["op_1","Byte encoding for op-codes with 1 operator."],["op_2","Byte encoding for op-codes with 2 operators."],["op_add","Addition: `save_variable = operand1 + operand2`"],["op_and","Bitwise AND: `save_variable = operand1 & operand2`"],["op_call_1n_var","Calls a routine (the address is stored in a variable)"],["op_dec","Decrements the value of the variable: `variable -= 1`"],["op_div","Division: `save_variable = operand1 / operand2`"],["op_erase_line","Erases the rest of the current line starting from the cursor"],["op_erase_window","Clears specified window"],["op_get_cursor","Stores row and column as two u16 words to the given addr"],["op_inc","Increments the value of the variable: `variable += 1`."],["op_loadb","Loads a byte from an array in a variable"],["op_loadw","Loads a word from an array in a variable"],["op_mod","Modulo: `save_variable = operand1 % operand2`"],["op_mul","Multiplikation: `save_variable = operand1 * operand2`"],["op_newline","Prints a newline character."],["op_not","Bitwise NOT: `variable = ~arg`"],["op_or","Bitwise OR operation: `save_variable = operand1 | operand2`"],["op_print_addr","Prints string at given adress"],["op_print_num_var","Prints the value of an integer variable"],["op_print_paddr","Prints string at given packed address"],["op_pull","Pulls value off the stack to a variable"],["op_push_u16","Pushes a u16 value (for example an address) on the stack"],["op_push_var","Pushes a variable on the stack"],["op_random","Calculates a random number from 1 to range"],["op_read_char","Reads keys from the keyboard and saves the asci-value in `local_var_id`"],["op_ret","Returns a LargeConst"],["op_set_color","Sets the colors of the foreground (font) and background to the constants specified"],["op_set_color_var","Sets the colors of the foreground (font) and background to the values in the variables"],["op_set_cursor","Positions the cursor at the specified `line` and `column`"],["op_set_cursor_operand","Positions the cursor at the `line` and `column` in the given Operands"],["op_set_text_style","Set the style of the text to `bold`, `reverse` (inverse colors), `monospace` and `italic`"],["op_store_var","Saves an operand to the specified variable"],["op_storeb","Stores a value to an array"],["op_storeboperand","Stores a value to an array"],["op_storew","Stores a value to an array"],["op_sub","Subtraction operation: `save_variable = operand1 - operand2`"],["op_var","Byte encoding for op-codes with variable operators (up to 4 are possible)."],["quit","Quits the Z-Code program immediately."],["write_argument","Writes the argument `operand` to the end of the output specified with `v`."],["write_i16","Writes u16 to a vec<u8> with the correct byte-order for the Z-Machine."],["write_u16","Writes u16 to a vec<u8> with the correct byte-order for the Z-Machine."]]});