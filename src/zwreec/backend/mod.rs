//! The backend module is responsible for processing the abstract syntax tree (AST) generated by the
//! frontend and generating an output file that can be run with a Z-Machine interpreter of your
//! choosing.
//!
//! It works by using the [codegen](codegen/index.html) module to generate the code.
//!
//! # Example
//! This example shows how you can use the backend to generate Z-Code.
//! The "ast" variable already contains an iterator over `zwreec::frontend::ast::ASTNode`s generated
//! by the [frontend](../frontend/index.html)
//!
//! ```
//! # extern crate zwreec;
//! # use std::io::Cursor;
//! #
//! // Create a configuration
//! let cfg = zwreec::config::Config::default_config();
//! # let mut twee = Cursor::new("::Start\nHello World".to_string().into_bytes());
//! #
//! # // Clean Input
//! # let mut cursor = zwreec::frontend::screener::handle_bom_encoding(&mut twee);
//! #
//! # // Generate Token Stream
//! # let tokens = zwreec::frontend::lexer::lex(cfg.clone(), &mut cursor);
//! #
//! # // Parse Tokens
//! # let p = zwreec::frontend::parser::Parser::new(cfg.clone());
//! # let ast = zwreec::frontend::ast::ASTBuilder::build(cfg.clone(), p.parse(tokens));
//!
//! // Output vector
//! let vec: Vec<u8> = vec![];
//! let mut output = Cursor::new(vec);
//!
//! // generate code
//! zwreec::backend::codegen::generate_zcode(&cfg, ast, &mut output);
//! ```

pub mod zcode;
pub mod codegen;
